//
// Generated file, do not edit! Created by nedtool 5.7 from dataMsg.msg.
//

#ifndef __DATAMSG_M_H
#define __DATAMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include <bitset>
    typedef  std::bitset<8> bits;
// }}

/**
 * Class generated from <tt>dataMsg.msg:24</tt> by nedtool.
 * <pre>
 * packet DataMsg
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int Seq_Num;
 *     double sendingTime;
 *     double recievingTime;
 *     string M_Payload;
 *     int Piggy; // 1 for Ack and 0 for nAck
 *     int PiggyID;
 *     string mycheckbits;   //could be string, Amer 
 * }
 * </pre>
 *
 * DataMsg_Base is only useful if it gets subclassed, and DataMsg is derived from it.
 * The minimum code to be written for DataMsg is the following:
 *
 * <pre>
 * class DataMsg : public DataMsg_Base
 * {
 *   private:
 *     void copy(const DataMsg& other) { ... }

 *   public:
 *     DataMsg(const char *name=nullptr, short kind=0) : DataMsg_Base(name,kind) {}
 *     DataMsg(const DataMsg& other) : DataMsg_Base(other) {copy(other);}
 *     DataMsg& operator=(const DataMsg& other) {if (this==&other) return *this; DataMsg_Base::operator=(other); copy(other); return *this;}
 *     virtual DataMsg *dup() const override {return new DataMsg(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from DataMsg_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(DataMsg)
 * </pre>
 */
class DataMsg_Base : public ::omnetpp::cPacket
{
  protected:
    int Seq_Num;
    double sendingTime;
    double recievingTime;
    ::omnetpp::opp_string M_Payload;
    int Piggy;
    int PiggyID;
    ::omnetpp::opp_string mycheckbits;

  private:
    void copy(const DataMsg_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataMsg_Base&);
    // make constructors protected to avoid instantiation

    // make assignment operator protected to force the user override it
    DataMsg_Base& operator=(const DataMsg_Base& other);

  public:
    DataMsg_Base(const char *name=nullptr, short kind=0);
    DataMsg_Base(const DataMsg_Base& other);
    virtual ~DataMsg_Base();
    virtual DataMsg_Base *dup() const override {return new DataMsg_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSeq_Num() const;
    virtual void setSeq_Num(int Seq_Num);
    virtual double getSendingTime() const;
    virtual void setSendingTime(double sendingTime);
    virtual double getRecievingTime() const;
    virtual void setRecievingTime(double recievingTime);
    virtual const char * getM_Payload() const;
    virtual void setM_Payload(const char * M_Payload);
    virtual int getPiggy() const;
    virtual void setPiggy(int Piggy);
    virtual int getPiggyID() const;
    virtual void setPiggyID(int PiggyID);
    virtual const char * getMycheckbits() const;
    virtual void setMycheckbits(const char * mycheckbits);
};


#endif // ifndef __DATAMSG_M_H

