//
// Generated file, do not edit! Created by nedtool 5.7 from ctrlMsg.msg.
//

#ifndef __CTRLMSG_M_H
#define __CTRLMSG_M_H

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION != OMNETPP_VERSION)
#error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

/**
 * Class generated from <tt>ctrlMsg.msg:21</tt> by nedtool.
 * <pre>
 * packet CtrlMsg
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int nodeId;
 *     string fName;
 *     bool start;
 *     int startTime;
 * 
 * }
 * </pre>
 *
 * CtrlMsg_Base is only useful if it gets subclassed, and CtrlMsg is derived from it.
 * The minimum code to be written for CtrlMsg is the following:
 *
 * <pre>
 * class CtrlMsg : public CtrlMsg_Base
 * {
 *   private:
 *     void copy(const CtrlMsg& other) { ... }

 *   public:
 *     CtrlMsg(const char *name=nullptr, short kind=0) : CtrlMsg_Base(name,kind) {}
 *     CtrlMsg(const CtrlMsg& other) : CtrlMsg_Base(other) {copy(other);}
 *     CtrlMsg& operator=(const CtrlMsg& other) {if (this==&other) return *this; CtrlMsg_Base::operator=(other); copy(other); return *this;}
 *     virtual CtrlMsg *dup() const override {return new CtrlMsg(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from CtrlMsg_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(CtrlMsg)
 * </pre>
 */
class CtrlMsg_Base : public ::omnetpp::cPacket
{
protected:
  int nodeId;
  ::omnetpp::opp_string fName;
  bool start;
  int startTime;

private:
  void copy(const CtrlMsg_Base &other);

protected:
  // protected and unimplemented operator==(), to prevent accidental usage
  bool operator==(const CtrlMsg_Base &);

  // make constructors protected to avoid instantiation
  // NO.

  // make assignment operator protected to force the user override it
  CtrlMsg_Base &operator=(const CtrlMsg_Base &other);

public:
  CtrlMsg_Base(const char *name = nullptr, short kind = 0);
  CtrlMsg_Base(const CtrlMsg_Base &other);
  virtual ~CtrlMsg_Base();
  virtual CtrlMsg_Base *dup() const override { return new CtrlMsg_Base(*this); }
  virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
  virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;



  // field getter/setter methods
  virtual int getNodeId() const;
  virtual void setNodeId(int nodeId);
  virtual const char *getFName() const;
  virtual void setFName(const char *fName);
  virtual bool getStart() const;
  virtual void setStart(bool start);
  virtual int getStartTime() const;
  virtual void setStartTime(int startTime);
};

#endif // ifndef __CTRLMSG_M_H
